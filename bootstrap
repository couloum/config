#!/bin/bash

DEBUG=0

BASE_DIR=$(dirname $0)
cd $BASE_DIR
BASE_DIR=$(pwd)

HOMEDIR=$HOME

show_usage() {
  echo "Usage: $(basename $0) [-d,--debug] [-h,--help] [-H,--home DIR]"
}

cprint() {
  COLOR=$1
  MSG=$2
  case $COLOR in
    black) COLOR_NUM=0 ;;
    red) COLOR_NUM=1 ;;
    green) COLOR_NUM=2 ;;
    yellow) COLOR_NUM=3 ;;
    blue) COLOR_NUM=4 ;;
    magenta) COLOR_NUM=5 ;;
    cyan) COLOR_NUM=6 ;;
    *) COLOR_NUM=7 ;; # white
  esac

  echo "$(tput setaf $COLOR_NUM)$MSG$(tput sgr 0)"
}

debug() {
  if [ $DEBUG -gt 0 ]; then
    cprint yellow "[DEBUG] $1"
  fi
}

check_and_replace() {
  FILE=$1
  TARGET=$2

  #
  # If $FILE alrady exist, create a backup
  #
  if [ -e $FILE ]; then
    
    #
    # If file is already a link, do nothing
    #

    if [ -L "$FILE" ] && [ $(readlink "$FILE") = "${TARGET}" ]; then
      cprint green "   * File ${FILE}: link is already present. Do nothing."
      return 0
    fi

    #
    # Otherwise, backup it
    #

    # Check for an available backup filename
    COUNT=0
    while [ $COUNT -eq 0 ] || [ -e "$BAK_FILE" ]; do
      BAK_FILE="${FILE}.bak-$(date +%Y-%m-%d)-${COUNT}"
      COUNT=$(($COUNT + 1))
    done

    # rename current file/dir
    [ -d $FILE ] && TYPE="directory" || TYPE="file"
    debug "mv \"${FILE}\" \"${BAK_FILE}\""
    mv "${FILE}" "${BAK_FILE}"
    if [ $? -eq 0 ]; then
      cprint green "   * Created a backup of ${TYPE} \`$(basename ${FILE})\` -> \`$(basename ${BAK_FILE})\`"
    else 
      cprint red "   ! Error during backup creation. Abort."
      return 1
    fi
    
  fi

  #
  # Create the symbolic link
  #
  debug "ln -s \"${TARGET}\" \"${FILE}\""
  ln -s "${TARGET}" "${FILE}"
  if [ $? -eq 0 ]; then
    cprint green "   * Created link: ${FILE} -> ${TARGET}"
    return 0
  else
    cprint red "   ! Error during link creation. Abort."
    return 1
  fi
}


bootstrap_module() {
  MODULE=$1

  RET=0
  IFS=$'\r\n'
  for line in $(cat $MODULE/.bootstrap | grep -Ev '^\s*#'); do
    FILE=$(echo $line | awk '{print $1}')
    TARGET=$(echo $line | awk '{print $2}')

    cprint magenta " * Processing file $(basename $FILE)"

    # If target is empty, there is an error
    if [ -z "${TARGET}" ]; then
      cprint red "   ! Target is empty. Did you forget it?"
      return 1
    fi
    # If target is a dash, deduct it
    if [ "${TARGET}" = "-" ]; then
      TARGET=$(expr $(basename "${FILE}") : '^\.*\(.*\)$')
    fi

    # Add parent dir of target
    TARGET="${BASE_DIR}/${MODULE}/$TARGET"

    # File is always in homedir
    FILE="$HOMEDIR/$FILE"

    cprint cyan "   % Target is ${TARGET}"

    # Check that target exist
    if [ ! -e "${TARGET}" ]; then
      cprint red "   ! Error: target does not exist ($TARGET)"
      RET=1
      continue
    fi 

    check_and_replace $FILE $TARGET || RET=1
  done

  return $RET
}

#
# Main script
#

# Get arguments
OPTS=$(getopt -o 'dhH:' --long 'debug,help,home' -n $(basename $0) -- "$@")
eval set -- $OPTS

while true; do
  case "$1" in
    -H|--home) HOMEDIR=$2 ; shift ;;
    -d|--debug) DEBUG=1 ;;
    -h|--help) show_usage ; exit 0 ;;
    --) shift ; break ;;
    *) echo "Internal error!"; exit 1 ;;
  esac
  shift
done

# For each submodule, read .bootstrap file and do the bootstrap magic
for module in $(ls .); do
  if [ "$module" = "." ] || [ "$module" = ".." ]; then
    continue
  fi


  if [ -d "$module" ]; then
    cprint cyan "[ Entering in submodule : $(basename $module) ]"

    SUCCESS=0
    # Execute standard boostrap if .bootstrap file exists
    if [ -f $module/.bootstrap ]; then
      cprint cyan "% Calling standard bootstrap"
      bootstrap_module $module
      if [ $? -eq 0 ]; then
        SUCCESS=1
      else 
        cprint red "*** Some errors occured during standard bootstrap. Please review. ***"
        echo
        continue
      fi
    fi

    # Execute custom bootstrap if a bootstrap script exists
    if [ -x $module/bootstrap ]; then
      cprint cyan "% Executing custom bootstrap script"
      $module/bootstrap
      if [ $? -eq 0 ]; then
        SUCCESS=1
      else 
        cprint red "*** Some errors occured during custom bootstrap. Please review. ***"
        echo
        continue
      fi
    fi

    if [ $SUCCESS -eq 0 ]; then
     cprint yellow "*** No bootstrap found in module ***"
   else
     cprint green "*** Module has been successfully bootstraped ***"
   fi
   echo
  fi
done
